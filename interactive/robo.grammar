# Robot action functions (macros merely for formatting)
(def @visit visit)
(def @visitArea visitArea)
(def @visitAreaCollections visitAreaCollections)
(def @move move)
(def @itemAct itemActionHandler)

### Keyword Rules ###

### these rules are not used further in derivation. their only purpose is to distinguish the keywords from random strings
( rule $KEYWORD_TOKEN (foreach) foreach (anchored true))
( rule $KEYWORD_TOKEN (in) in (anchored true))
(rule $KEYWORD_TOKEN (containing) containing (anchored true))
(rule $KEYWORD_TOKEN (visit) visit (anchored true))
(rule $KEYWORD_TOKEN (is) is (anchored true))
(rule $KEYWORD_TOKEN (repeat) repeat (anchored true))
(rule $KEYWORD_TOKEN (while) while (anchored true))
(rule $KEYWORD_TOKEN (if) if (anchored true))

### Action Rules ###

(rule $Action (strict $Action) (lambda a (:strict (var a))) (anchored true))

## $Visit rules ##
(rule $Action ($Visit $Point) (lambda v (lambda x (: @visit (var x)))) (anchored true))
(rule 
	$Action 
	($Visit $Areas) 
	(lambda v 
		(lambda a 
			(: @visitArea 
		 	(var a)
			)
		)
	) 
	(anchored true)
)

(rule 
	$Action 
	($Visit $Areas while avoiding $Areas) 
	(lambda v 
		(lambda a1
			(lambda a2 
				(: 
					@visitArea 
			 		(var a1)
			 		(var a2)
			 	)
			)
		) 
	)
	(anchored true)
)


(rule 
	$Action 
	($Visit $AreaCollections while avoiding $Areas) 
	(lambda v 
		(lambda a1
			(lambda a2 
				(: 
					@visitAreaCollections 
			 		(var a1)
			 		(var a2)
			 	)
			)
		) 
	)
	(anchored true)
)


(rule
	$Action
	($Visit $AreaCollections)
	(lambda v 
		(lambda a
			(: @visitAreaCollections
				(var a)	
			)
		)
	)
	(anchored true)
)

(rule $Action ($Visit $Point while avoiding $Areas) (lambda v (lambda f  (lambda a (: @visit (var f) (var a))))) (anchored true))

(rule $Action (visit $Point) (lambda x (: @visit (var x))) (anchored true))
(rule 
	$Action 
	(visit $Areas) 
	(lambda a 
		(: @visitArea 
		 (var a)
		)
	) 
	(anchored true)
)

(rule 
	$Action 
	(visit $Areas while avoiding $Areas) 
	(lambda a1
		(lambda a2 
			(: 
				@visitArea 
		 		(var a1)
		 		(var a2)
		 	)
		)
	) 
	(anchored true)
)


(rule 
	$Action 
	(visit $AreaCollections while avoiding $Areas) 
	(lambda a1
		(lambda a2 
			(: 
				@visitAreaCollections 
		 		(var a1)
		 		(var a2)
		 	)
		)
	) 
	(anchored true)
)


(rule
	$Action
	(visit $AreaCollections)
	(lambda a
		(: @visitAreaCollections
			(var a)	
		)
	)
	(anchored true)
)

(rule $Action (visit $Point while avoiding $Areas) (lambda f  (lambda a (: @visit (var f) (var a)))) (anchored true))

(rule $Visit (visit) visit (anchored true))

## $Move rules ##
(rule $Action ($Move $Direction) (lambda m (lambda d (: @move (var d)))) (anchored true))
(rule $Action (move $Direction) (lambda d (: @move (var d))) (anchored true))
(rule $Move (move) move (anchored true))

## $ItemActionFragment rules ##
(rule $Action ($ItemActionFragment $CountedItem) (lambda f (lambda i (: @itemAct (var f) (var i)))) (anchored true))
(rule $ItemActionFragment ($Pick) (IdentityFn) (anchored true))
(rule $ItemActionFragment ($Drop) (IdentityFn) (anchored true))
(rule $Pick (pick) pick (anchored true))
(rule $Drop (drop) drop (anchored true))

# foreach "defines" the point variable
(rule $Action (foreach point in $Areas $Action )
    (lambda s (lambda a (:foreach point (var s) (var a)))) (defines point) (anchored true))
    
   # foreach defines the area variable
(rule $Action (foreach area in $AreaCollection $Action )
    (lambda s (lambda a (:foreach area (var s) (var a)))) (defines area) (anchored true))

### Variable Rules ###

# point variable must be defined before it can be used
(rule $Point (point) (ConstantFn (call getSelectedPoint)) (requires point) (anchored true))
(rule $Area (area) (ConstantFn (call getSelectedArea)) (requires area) (anchored true))

### Situation Rules ###

# These will be used only if the final language spec requires it
(rule $Situation ( { $Situations } ) (IdentityFn) (anchored true))
(rule $Situations ($Situation) (IdentityFn) (anchored true))
(rule $Situations ($Situations or  $Situation) (lambda s1 (lambda s2 (or  (var s1) (var s2)))) (anchored true))
(rule $Situations ($Situations and $Situation) (lambda s1 (lambda s2 (and (var s1) (var s2)))) (anchored true))
(rule $Situation (not $Situations) (lambda s (not (var s))) (anchored true))

(rule $Situation ($Item at $Point) (lambda i (lambda f (call itemAt (var i) (var f)))) (anchored true))
(rule $Situation ($Item at $Areas) (lambda i (lambda a (call itemAt (var i) (var a)))) (anchored true))
(rule $Situation (robot has $Item) (lambda i (call robotHas (var i))) (anchored true))
(rule $Situation (robot at $Point) (lambda f (call robotAt (var f))) (anchored true))
(rule $Situation (robot at $Areas) (lambda a (call robotAt (var a))) (anchored true))
(rule $Situation (possible $Action) (lambda a (:realizable (var a))) (anchored true))


### Location Rules ###
#used in World.java, combine collections
#(rule $Set ($Areas) (IdentityFn) (anchored true))
#(rule $Set ($AreaCollections) (IdentityFn) (anchored true))


(rule $AreaCollection (rooms) all_rooms (anchored true))

(rule $Area (world) world (anchored true))
(for @name (room1 room2 room3 room4 room5 room6 room7 room8 room9)
  (rule $Area (@name) @name (anchored true))
)


#(rule $Area ([ $PointList ]) (IdentityFn) (anchored true))

(rule 
	$Area 
	([ $PointList ]) 
	(lambda a 
		(call
			makeArray
			(var a)
		)	
	) 
	(anchored true)
)


(rule 
	$AreaCollection 
	([ $AreaList ]) 
	(lambda a 
		(call
			makeArray
			(var a)
		)	
	) 
	(anchored true)
)


(rule $Area (area with corners $Point and $Point) (lambda p1 (lambda p2
    (call getAreaWithCorners (var p1) (var p2)))) (anchored true))


(rule $Areas ( $Area ) (IdentityFn) (anchored true))
(rule $AreaCollections ( $AreaCollection ) (IdentityFn) (anchored true))
(rule $Area ( { $Areas } ) (IdentityFn) (anchored true))
(rule $AreaCollection ( { $AreaCollections } ) (IdentityFn) (anchored true))

(rule $Areas ( $Areas or $Area ) (lambda a1 (lambda a2 (or (var a1) (var a2)))) (anchored true))
(rule 
	$AreaCollections
	($AreaCollections or $AreaCollection)
	(lambda x 
		(lambda y
    		(
    			or  
    			(var x) 
    			(var y)
    		)
    	)
    ) 
    (anchored true)
)


(rule $Areas ( $Areas and $Area ) (lambda a1 (lambda a2 (and (var a1) (var a2)))) (anchored true))
(rule
	$AreaCollections
	($AreaCollections and $AreaCollection)
	( lambda a1 
		(lambda a2 
			(and 
				(var a1) 
				(var a2)
			)
		) 
	)
)



(rule $Areas 
	( $Areas minus $Area ) 
	(lambda a1 
		(lambda a2 
			(call 
				setOfLocationsDifference 
				(var a1) 
				(var a2)
			)
		)
	) 
	(anchored true)
)

(rule $AreaCollections ( $AreaCollections minus $AreaCollection ) (lambda a1 (lambda a2 (call setOfLocationsDifference (var a1)  (var a2)))) (anchored true))


(rule 
	$AreaList 
	( $Area ) 
	(lambda a
		(call
			createAreaListFromArea
			(var a)
		)
	) 
	(anchored true)
)

(rule $AreaList 
	( $AreaList , $Area ) 
	(lambda x 
		( lambda y 
			(call 
				combineCollections 
				(var x) 
				(var y)
			)
		)
	) 
	(anchored true)
)


(rule $Point ([ $Numbers , $Numbers ]) (lambda x (lambda y (call makePoint (var x) (var y)))) (anchored true))
(rule $Point (current) (ConstantFn (call getRobotLocation)) (anchored true))
(rule $PointList ( $Point ) (IdentityFn) (anchored true))

(rule $PointList 
	( $PointList , $Point ) 
	(lambda x 
		( lambda y 
			(call 
				combineAreas
				(var x) 
				(var y)
			)
		)
	) 
	(anchored true)
)




(rule $Area ($Areas containing $Item) (lambda a (lambda i
    (call filterArea (var a) (var i)))) (anchored true))


(rule 
	$AreaCollection 
	($AreaCollections containing $Item) 
	(lambda c 
		(lambda i
    		(call 
    			areasFromItems 
    			(var c) 
    			(var i)
    		)
    	)
    )
    (anchored true)
)



(rule $AreaCollection ( { $AreaCollection } ) (IdentityFn) (anchored true))



### Item Rules ###

(rule $CountedItem ($Item) (lambda i (call setLimit (number 1) (var i))) (anchored true))
(rule $CountedItem (every $Item) (lambda i (call setLimit (number -1) (var i))) (anchored true))

(rule $Item (item) (ConstantFn (call allItems)) (anchored true))
(rule $Item (item $PropertySets) (IdentityFn) (anchored true))

#function RoboWorld.has
(rule 
	$PropertySet 
	($Rel $Property) 
	(lambda r 
		(lambda c 
			(
				(var r) 
				(var c)
			)
		)
	)
	(anchored true)
)

(rule 
	$Property 
	($Color) 
	(IdentityFn) 
	(anchored true)
)

(rule 
	$Property 
	($Shape) 
	(IdentityFn)
	(anchored true)
)

(rule $PropertySets ($PropertySet) (IdentityFn) (anchored true))
(rule $PropertySet ( { $PropertySets } ) (IdentityFn) (anchored true))
(rule $PropertySet (not $PropertySets) (lambda x (not (var x))) (anchored true))

(rule $PropertySets 
	($PropertySets and $PropertySet) 
	(lambda s1 
		(lambda s2
			(and 
				(var s1) 
				(var s2)
			)
		)
	) 
	(anchored true)
)

(rule $PropertySets ($PropertySets or $PropertySet) (lambda s1 (lambda s2
					(or (var s1) (var s2)))) (anchored true))

(rule $Rel (is) items?property (anchored true))


### Data type definitions ###

(rule $Color ($TOKEN) (SimpleLexiconFn (type color)) (anchored true))


(for @shp (triangle circle square)
	(rule $Shape (@shp)  @shp (anchored true))

)


(for @dir (up down left right)
  (rule $Direction (@dir) @dir (anchored true))
)

### Remnants of DAL grammar ###

(rule $ROOT ($Actions) (IdentityFn) (anchored true))

(rule $Actions ($Actions ; $Action) (lambda a1 (lambda a2 (:s (var a1) (var a2)))) (anchored true))
(rule $Actions ($Action) (IdentityFn) (anchored true))
(rule $Action ({ $Actions }) (IdentityFn) (anchored true))
(rule $Action ($Action ;) (IdentityFn) (anchored true))

(rule $Action (repeat $Numbers times $Action) (lambda n (lambda a (:loop (var n) (var a)))) (anchored true))
(rule $Action (if $Situations $Action) (lambda b (lambda a (:if (var b) (var a)))) (anchored true))
(rule $Action (while $Situations $Action ) (lambda s (lambda a (:while (var s) (var a)))) (anchored 1))

############### Arithmetic
(for @op (+ -)
  (rule $Numbers ($Numbers @op $Number) (lambda n1  (lambda n2
  (@op (var n1) (var n2)))) (anchored true))
)

(rule $Number ($TOKEN) (NumberFn) (anchored true))
(rule $Number ({ $Numbers }) (IdentityFn) (anchored true))
(rule $Numbers ( $Number ) (IdentityFn) (anchored true))